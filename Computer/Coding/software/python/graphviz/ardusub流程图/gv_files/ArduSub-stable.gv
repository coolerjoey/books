//label前面的标号必须是数字,不要使用x.x.x
//fonts:SimSun,SimHei
//edge默认是实线
//node0000:cluster0下0分支的第00个node

	


digraph G{
	subgraph cluster_hal_run {
		label = "Ardusub.cpp";
		nodehalrun01 [label="AP_HAL_MAIN_CALLBACKS(&sub)"];
		nodehalrun02 [label="hal.run(argc, argv, CALLBACKS)"];
		edge[color = red,style = dotted];
		nodehalrun01->nodehalrun02
	}
	subgraph cluster_get_HAL{
		label = "Sub.cpp";
		nodegetHAL01 [label="const AP_HAL::HAL& hal=AP_HAL::get_HAL()"];
	}
	subgraph cluster_HAL_ChibiOS_run{
		label = "HAL_ChibiOS::run(int argc, char * const argv[], Callbacks* callbacks) const";
		nodeHALChibiOSrun01 [label="main_loop()"];
		nodeHALChibiOSrun02 [label="g_callbacks->setup()"];
		nodeHALChibiOSrun03 [label="g_callbacks->loop()"];
		edge[color = red,style = dotted];
		nodeHALChibiOSrun01->nodeHALChibiOSrun02
		edge[color = black,style = line];
		nodeHALChibiOSrun02->nodeHALChibiOSrun03->nodeHALChibiOSrun03
	}
	
	nodegetHAL01->nodehalrun02 [color = blue,style = dotted,label="hal=\nHAL_ChibiOS",fontcolor=blue]
	nodehalrun02->nodeHALChibiOSrun01 [color = red,style = dotted,ltail=nodehalrun02,lhead=cluster_HAL_ChibiOS_run]
	nodehalrun01->nodeHALChibiOSrun01 [color = blue,style = dotted,ltail=nodehalrun01,lhead=cluster_HAL_ChibiOS_run,label="g_callbacks=\n sub",fontcolor=blue]
	
	graph [fontsize=10 fontname="SimSun" compound=true];
	node [shape=box,fontsize=10,fontname="SimSun",color=green,style=filled];
	subgraph cluster0 {
		label = "Sub::fast_loop()\n cluster0";
		//node [shape=box,color=green,style=filled,fontsize=16];
		node0001 [label="ins.update()\n获取加速度计和陀螺仪原始数据"];		
		node0002 [label="attitude_control.rate_controller_run()\n姿态控制->进行角度PID运算"];
		node0003 [label="motors_output()\n输出电机pwm值"];
		node0004 [label="read_AHRS()\n姿态解算"];
		node0005 [label="read_inertia()"];
		node0006 [label="check_ekf_yaw_reset()"];
		node0007 [label="update_flight_mode()\n飞行模式判断(默认manual)"];
		node0008 [label="update_home_from_EKF()"];
		node0009 [label="update_surface_and_bottom_detector()"];
		node0010 [label="camera_mount_update_fast()"];
		//edge[color = red] 
		node0001->node0002->node0003->node0004->node0005->node0006->node0007->node0008->node0009->node0010;
	}
 	
	//ins.update()
	subgraph cluster1 {
		label = "AP_InertialSensor::update()\n cluster1";
		node1001 [label="_backends[i]->update()"];
	}
	subgraph cluster1_1 {
		label = "AP_InertialSensor.cpp\n cluster1_1";
		node1101 [label="_add_backend(AP_InertialSensor_Backend *backend)"];
		node1102 [label="AP_InertialSensor::detect_backends()"];
		node1103 [label="_start_backends()"];
		node1104 [label="init(uint16_t sample_rate)"];
		edge[color = red,style = dotted];
		node1104->node1103->node1102->node1101
	}
	subgraph cluster1_2{
		label = "Ardusub.cpp\n cluster1_2";
		node1201 [label="setup()"];
		node1202 [label=" AP_Param::setup_sketch_defaults()"];
		node1203 [label="init_ardupilot()"];
		node1204 [label=" scheduler.init(&scheduler_tasks[0], ARRAY_SIZE(scheduler_tasks), MASK_LOG_PM);"]
		edge[color = red,style = dotted]
		node1201->node1202
		edge[color = black]
		node1202->node1203->node1204
	}
	subgraph cluster1_3{
		label = "Sub::init_ardupilot()\n初始化\n cluster1_3";
		node1301 [label="init_rc_in()\n初始化油门通道"];
		node1302 [label="startup_INS_ground();"]
		node1301->node1302
	}
	subgraph cluster1_4{
		label = "AP_InertialSensor_Backend.cpp\n更新陀螺仪和加速度计值\n cluster1_4";
		node1401 [label="AP_InertialSensor_Invensense::update()"];
		node1402 [label="AP_InertialSensor_LSM9DS0::update()"];
		node1403 [label="update_accel(_accel_instance)"];
		node1404 [label="update_gyro(_gyro_instance)"];
		edge[color = red,style = dotted]
		node1401->node1403 node1402->node1403
		edge[color = black]
		node1403->node1404
	}
	//...
	
	//attitude_control.rate_controller_run()	
	subgraph cluster2 {
		label = "AC_AttitudeControl_Sub::rate_controller_run()\n cluster2";
		node2001 [label="update_throttle_rpy_mix()"];
		node2002 [label="gyro_latest = _ahrs.get_gyro_latest()"]
		node2003 [label="_motors.set_roll(rate_target_to_motor_roll(gyro_latest.x, _rate_target_ang_vel.x))"];
		node2004 [label="_motors.set_pitch(rate_target_to_motor_pitch(gyro_latest.y, _rate_target_ang_vel.y))"];
		node2005 [label="_motors.set_yaw(rate_target_to_motor_yaw(gyro_latest.z, _rate_target_ang_vel.z))"];
		edge[color = black]
		node2001->node2002->node2003->node2004->node2005
	}
	subgraph cluster2_1 {
		label = "AC_AttitudeControl::rate_target_to_motor_roll(float rate_actual_rads, float rate_target_rads)\n 横滚角速度PID控制器\n cluster2_1";
		node [shape=oval,color=skyblue];
		node2101 [label="rate_ROLL PID controller"];
	}
	
	//...
	
	
	
	//motors_output()
	subgraph cluster3{
		label = "AP_MotorsMulticopter::output()\n cluster3";
		node3001 [label="update_throttle_filter()"]
		node3002 [label="update_lift_max_from_batt_voltage();"];
		node3003 [label="output_logic();"];
		node3004 [label="output_armed_stabilizing();"];
		node3005 [label="thrust_compensation();"];
		node3006 [label="output_to_motors()\n pwm电机分配"];
		node3007 [label="output_boost_throttle();"];
		edge[color = black]
		node3001->node3002->node3003->node3004->node3005->node3006->node3007
	}
	subgraph cluster3_1{
		label = "AP_Motors6DOF.cpp\n cluster3_1";
		node3101 [label="output_armed_stabilizing()"]
	}
	

	
	//read_AHRS()
	subgraph cluster4 {
		label = "read_AHRS()\n cluster4"; 
		node4001 [label="ahrs_update(true)"]
	}
	subgraph cluster4_1{
		label = "ahrs_update(true)\n cluster4_1";
		node4101 [label="update_DCM(skip_ins_update)"]
	}
	
	//update_flight_mode()
	node [shape=oval,color=skyblue];
	nodemode [label="control_mode == ?"]
	node [shape=box,color=green];
	subgraph cluster7{
		label = "control_stabilize.cpp \n cluster7"; 
		node7001 [label="stabilize_run \n 更新和计算目标角速度值 _rate_target_ang_vel"]	
		node7002 [label="get_pilot_desired_lean_angles(channel_roll->get_control_in(), channel_pitch->get_control_in(), target_roll, target_pitch, aparm.angle_max)"]
		node7003 [label=" target_yaw_rate = get_pilot_desired_yaw_rate(channel_yaw->get_control_in())"]
		node7004 [label="attitude_control.input_euler_angle_roll_pitch_euler_rate_yaw(target_roll, target_pitch, target_yaw_rate) \n 把遥控器输入转化为期望角速度"]
		node7001->node7002 [color = red,style = dotted]
		node7002->node7003->node7004 
	}
	
	
	//scheduler_tasks[]
	noderaspberry [label="树莓派",color=gray,fontcolor=red,fontsize=20]
	subgraph cluster11{
		label = "AP_Scheduler::Task Sub::scheduler_tasks[] \n cluster11";
		node11001 [label="Sub::fifty_hz_loop()"];
		node11002 [label="Sub::update_GPS"]
		
		nodeOPTFLOW [shape = Mdiamond,label="OPTFLOW == ENABLED ?",color=skyblue]
		node11003 [label="OpticalFlow::update"]
		
		node11004 [label="Sub::update_batt_compass"]
		node11005 [label="Sub::read_rangefinder"]
		node11006 [label="Sub::update_altitude"]
		node11007 [label="Sub::three_hz_loop"]
		node11008 [label="Sub::update_turn_counter"]
		node11009 [label="AP_Baro::accumulate"]
		node110010 [label="AP_Notify::accumulate"]
		node110011 [label="Sub::one_hz_loop"]
		node110012 [label="GCS::update_receive"]
		node110013 [label="GCS::update_send"]
		
		nodeMOUNT [shape = Mdiamond,label="MOUNT == ENABLED ?",color=skyblue]
		node110014 [label="AP_Mount::update"]
		
		nodeCAMERA [shape = Mdiamond,label="CAMERA == ENABLED ?",color=skyblue]
		node110015 [label="AP_Camera::update_trigger"]
		
		node110016 [label="Sub::ten_hz_logging_loop"]
		node110017 [label="Sub::twentyfive_hz_logging"]
		node110018 [label="AP_Logger::periodic_tasks"]
		node110019 [label="AP_InertialSensor::periodic"]
		node110020 [label="AP_Scheduler::update_logging"]
		
		nodeRPM [shape = Mdiamond,label="RPM == ENABLED ?",color=skyblue]
		node110021 [label="Sub::rpm_update"]
		
		node110022 [label="Compass::cal_update"]
		node110023 [label="Sub::accel_cal_update"]
		node110024 [label="Sub::terrain_update"]
		
		nodeGRIPPER [shape = Mdiamond,label="GRIPPER == ENABLED ?",color=skyblue]
		node110025 [label="AP_Gripper::update"]
		
		node11001->node11002->nodeOPTFLOW
		nodeOPTFLOW->node11003 [label="YES",fontcolor=blue]
		nodeOPTFLOW->node11004 [label="NO",fontcolor=blue]
		node11003->node11004
		node11004->node11005->node11006->node11007->node11008->node11009->node110010->node110011->node110012->node110013->nodeMOUNT
		nodeMOUNT->node110014 [label="YES",fontcolor=blue]
		nodeMOUNT->nodeCAMERA [label="NO",fontcolor=blue]
		nodeCAMERA->node110015 [label="YES",fontcolor=blue]
		node110014->node110015
		nodeCAMERA->node110016 [label="NO",fontcolor=blue]
		node110015->node110016->node110017->node110018->node110019->node110020->nodeRPM
		nodeRPM->node110021 [label="YES",fontcolor=blue]
		nodeRPM->node110022 [label="NO",fontcolor=blue]
		node110021->node110022->node110023->node110024->nodeGRIPPER
		nodeGRIPPER->node110025 [label="YES",fontcolor=blue]
		
		noderaspberry->node110012 [color= blue,style = dotted,label="MAVlink",fontcolor=blue]
		node110013->noderaspberry [color= blue,style = dotted,label="MAVlink",fontcolor=blue]
	}
	
	
	
	
	node0001->node1001 [color = red,style = dotted,lhead=cluster1]
	node1001->node1401 [color = red,style = dotted,lhead=cluster1_4]
	node1203->node1302 [color = red,style = dotted,lhead=cluster1_3]
	node1302->node1104 [color = red,style = dotted]
	node1101->node1001 [color= blue,style = dotted,ltail=cluster1_1,label="_backends[0]=\n AP_InertialSensor_Invensense (MPU6000)\n _backends[1]=\n AP_InertialSensor_LSM9DS0 (L3GD20?)",fontcolor=blue]
			
	node0002->node2001 [color = red,style = dotted,lhead=cluster2]
	node2002->node2101 [color= blue,style = dotted,label="gyro_latest.x \n 横滚角实际角速度",fontcolor=blue,fontname="SimSun"]
	node2003->node2101 [color = red,style = dotted,lhead=cluster2_1]
	
	
	node0003->node3001 [color = red,style = dotted,lhead=cluster3]
	node3006->node3101 [color = red,style = dotted,lhead=cluster3_1]
	node2003->node3101 [color= blue,style = dotted,label="_roll_in",fontcolor=blue]
	node2004->node3101 [color= blue,style = dotted,label="_pitch_in",fontcolor=blue]
	node2005->node3101 [color= blue,style = dotted,label="_yaw_in",fontcolor=blue]
	
	
	node0004->node4001 [color = red,style = dotted,lhead=cluster4]
	node4001->node4101 [color=red,style=dotted,lhead=cluster4_1];		

	node0007->nodemode [color = red,style = dotted]
	nodemode->node7001 [color = black,lhead=cluster7,label="STABILIZE"]
	node1301->node7002 [color = blue,style = dotted,label="channel_roll \n channel_pitch",fontcolor=blue]
	node1301->node7003 [color = blue,style = dotted,label="channel_yaw \n",fontcolor=blue]
	node7004->node2101 [color = blue,style = dotted,label="_rate_target_ang_vel.x\n 横滚角期望角速度",fontcolor=blue ,fontname="SimSun"]
	
	start [shape = Mdiamond];
	end [shape = Msquare];
}

